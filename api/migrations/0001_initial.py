# Generated by Django 4.1.4 on 2023-12-04 07:35

import api.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icon_name', models.CharField(blank=True, max_length=70, null=True, verbose_name='Название иконки')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Описание')),
                ('is_private', models.BooleanField(default=False, verbose_name='Личное')),
                ('is_systemic', models.BooleanField(default=False, editable=False, verbose_name='Системное')),
                ('code', models.PositiveIntegerField(blank=True, db_index=True, default=None, editable=False, null=True, verbose_name='Код')),
            ],
            options={
                'verbose_name': 'Достижение',
                'verbose_name_plural': 'Достижения',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='AchievementProgressScript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='Имя')),
            ],
            options={
                'verbose_name': 'Скрипт получения прогресса достижения',
                'verbose_name_plural': 'Скрипты получения прогресса достижения',
            },
        ),
        migrations.CreateModel(
            name='AnswerFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='Название')),
                ('code', models.PositiveIntegerField(db_index=True, editable=False, unique=True, verbose_name='Код')),
            ],
            options={
                'verbose_name': 'Формат ответа',
                'verbose_name_plural': 'Форматы ответов',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='AssignedTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('readline', models.DateTimeField(blank=True, null=True, verbose_name='Мягкий срок выполнения')),
                ('deadline', models.DateTimeField(blank=True, null=True, verbose_name='Жесткий срок выполнения')),
            ],
            options={
                'verbose_name': 'Назначенное задание',
                'verbose_name_plural': 'Назначенные задания',
                'ordering': ['-deadline', '-readline'],
            },
        ),
        migrations.CreateModel(
            name='AssignedTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Назначенная дата')),
                ('is_open', models.BooleanField(default=False, verbose_name='Доступно для выполнения')),
                ('open_results', models.BooleanField(default=False, verbose_name='Открыть результаты')),
            ],
            options={
                'verbose_name': 'Назначенное тестирование',
                'verbose_name_plural': 'Назначенные тестирование',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='CheckingCompletingTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kwargs', models.JSONField(blank=True, max_length=16384, null=True, verbose_name='Словарь аргументов')),
                ('on_a_background', models.BooleanField(default=False, verbose_name='Фоновое выполнение')),
            ],
            options={
                'verbose_name': 'Проверка выполнения задания',
                'verbose_name_plural': 'Проверки выполнения заданий',
            },
        ),
        migrations.CreateModel(
            name='CommentList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Список комментариев',
                'verbose_name_plural': 'Списки комментариев',
            },
        ),
        migrations.CreateModel(
            name='CompletingTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_sent', models.DateTimeField(blank=True, null=True, verbose_name='Дата и время отправления')),
                ('total_attempts', models.PositiveIntegerField(default=0, verbose_name='Всего попыток')),
                ('attempts_today', models.PositiveIntegerField(default=0, verbose_name='Попыток сегодня')),
                ('kwargs', models.JSONField(blank=True, max_length=16384, null=True, verbose_name='Словарь аргументов')),
                ('points', models.PositiveIntegerField(default=0, verbose_name='Баллы за выполнение')),
                ('viewed', models.BooleanField(default=False, verbose_name='Просмотрено')),
                ('assigned_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.assignedtask', verbose_name='Назначенное задание')),
                ('comment_list', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.commentlist', verbose_name='Список комментариев')),
            ],
            options={
                'verbose_name': 'Выполнение задания',
                'verbose_name_plural': 'Выполнения заданий',
                'ordering': ['-datetime_sent'],
            },
        ),
        migrations.CreateModel(
            name='CompletingTaskCheckScript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icon_name', models.CharField(blank=True, max_length=70, null=True, verbose_name='Название иконки')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='Имя')),
                ('description', models.CharField(max_length=4096, verbose_name='Описание')),
                ('kwargs', models.JSONField(blank=True, max_length=16384, null=True, verbose_name='Словарь аргументов')),
            ],
            options={
                'verbose_name': 'Скрипт проверки выполнения задания',
                'verbose_name_plural': 'Скрипты проверки выполнения заданий',
            },
        ),
        migrations.CreateModel(
            name='CourseSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='icons/', verbose_name='Иконка')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Название')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Позиция в списке')),
            ],
            options={
                'verbose_name': 'Раздел курса',
                'verbose_name_plural': 'Разделы курса',
            },
        ),
        migrations.CreateModel(
            name='Difficulty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='Название')),
                ('code', models.PositiveIntegerField(db_index=True, editable=False, unique=True, verbose_name='Код')),
            ],
            options={
                'verbose_name': 'Сложность',
                'verbose_name_plural': 'Сложности',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='FileList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Список файлов',
                'verbose_name_plural': 'Списки файлов',
            },
        ),
        migrations.CreateModel(
            name='Hashtag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=150, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Хештег',
                'verbose_name_plural': 'Хештег',
            },
        ),
        migrations.CreateModel(
            name='HashtagList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Список хештегов',
                'verbose_name_plural': 'Списки хештегов',
            },
        ),
        migrations.CreateModel(
            name='IPAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(db_index=True, max_length=45, unique=True, verbose_name='Значение')),
                ('last_minute_requests', models.PositiveIntegerField(default=0, verbose_name='Запросов за последнюю минуту')),
            ],
            options={
                'verbose_name': 'IP адрес',
                'verbose_name_plural': 'IP адреса',
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Название')),
                ('date', models.DateField(verbose_name='Дата')),
                ('number', models.PositiveIntegerField(verbose_name='Номер занятия')),
            ],
            options={
                'verbose_name': 'Занятие',
                'verbose_name_plural': 'Занятия',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.PositiveIntegerField(db_index=True, unique=True, verbose_name='Значение')),
                ('points', models.PositiveIntegerField(unique=True, verbose_name='Количество баллов')),
            ],
            options={
                'verbose_name': 'Уровень',
                'verbose_name_plural': 'Уровни',
            },
        ),
        migrations.CreateModel(
            name='LinkGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Название')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Позиция в списке')),
            ],
            options={
                'verbose_name': 'Группа ссылок',
                'verbose_name_plural': 'Группы ссылок',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Mark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='Название')),
                ('value', models.PositiveIntegerField(unique=True, verbose_name='Значение')),
                ('complete_percent', models.PositiveIntegerField(unique=True, verbose_name='Процент выполнения')),
            ],
            options={
                'verbose_name': 'Оценка',
                'verbose_name_plural': 'Оценки',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='NoticeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=150, verbose_name='Название')),
                ('code', models.PositiveIntegerField(db_index=True, editable=False, unique=True, verbose_name='Код')),
            ],
            options={
                'verbose_name': 'Тип уведомления',
                'verbose_name_plural': 'Типы уведомлений',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('datetime_update', models.DateTimeField(auto_now=True, verbose_name='Дата и время обновления')),
                ('header', models.CharField(max_length=150, unique=True, verbose_name='Заголовок')),
                ('description', models.CharField(blank=True, max_length=4096, null=True, verbose_name='Описание')),
                ('text', models.TextField(verbose_name='Текст')),
                ('is_published', models.BooleanField(default=True, verbose_name='Опубликовать')),
                ('count_views', models.PositiveIntegerField(default=0, editable=False, verbose_name='Количество просмотров')),
                ('comment_list', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.commentlist', verbose_name='Список комментариев')),
                ('file_list', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.filelist', verbose_name='Список файлов')),
                ('hashtag_list', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.hashtaglist', verbose_name='Список хештегов')),
            ],
            options={
                'verbose_name': 'Пост',
                'verbose_name_plural': 'Посты',
            },
        ),
        migrations.CreateModel(
            name='ProjectStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Название')),
                ('code', models.PositiveIntegerField(db_index=True, editable=False, unique=True, verbose_name='Код')),
            ],
            options={
                'verbose_name': 'Статус проекта',
                'verbose_name_plural': 'Статусы проектов',
            },
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='Название')),
                ('code', models.PositiveIntegerField(db_index=True, editable=False, unique=True, verbose_name='Код')),
            ],
            options={
                'verbose_name': 'Ранг',
                'verbose_name_plural': 'Ранг',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='RequestMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=70, unique=True, verbose_name='Имя')),
            ],
            options={
                'verbose_name': 'Метод запроса',
                'verbose_name_plural': 'Методы запроса',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.PositiveIntegerField(default=0, verbose_name='Количество баллов')),
                ('coins', models.PositiveIntegerField(default=0, verbose_name='Количество монет')),
                ('option', models.PositiveIntegerField(blank=True, null=True, verbose_name='Вариант')),
            ],
            options={
                'verbose_name': 'Студент',
                'verbose_name_plural': 'Студенты',
            },
        ),
        migrations.CreateModel(
            name='StudentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Группа студентов',
                'verbose_name_plural': 'Группы студентов',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(default='1.0.0', max_length=20, verbose_name='Версия')),
                ('hide_rating', models.BooleanField(default=False, verbose_name='Скрыть рейтинг')),
            ],
            options={
                'verbose_name': 'Система',
                'verbose_name_plural': 'Система',
            },
        ),
        migrations.CreateModel(
            name='TaskAccessCheckScript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icon_name', models.CharField(blank=True, max_length=70, null=True, verbose_name='Название иконки')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='Имя')),
                ('description', models.CharField(max_length=4096, verbose_name='Описание')),
                ('kwargs', models.JSONField(blank=True, max_length=16384, null=True, verbose_name='Словарь аргументов')),
            ],
            options={
                'verbose_name': 'Скрипт проверки доступа к заданию',
                'verbose_name_plural': 'Скрипты проверки доступа к заданиям',
            },
        ),
        migrations.CreateModel(
            name='TaskStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='Название')),
                ('code', models.PositiveIntegerField(db_index=True, editable=False, unique=True, verbose_name='Код')),
            ],
            options={
                'verbose_name': 'Статус выполнения задания',
                'verbose_name_plural': 'Статусы выполнения заданий',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='TechnicalWork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_begin', models.DateTimeField(verbose_name='Дата и время начала')),
                ('datetime_end', models.DateTimeField(verbose_name='Дата и время завершения')),
                ('description', models.CharField(max_length=4096, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Технические работы на сервере',
                'verbose_name_plural': 'Технические работы на сервере',
                'ordering': ['-datetime_begin'],
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('image', models.ImageField(blank=True, null=True, upload_to='icons/', verbose_name='Иконка')),
                ('name', models.CharField(max_length=150, verbose_name='Название')),
                ('text', models.TextField(max_length=16384, verbose_name='Текст')),
                ('points', models.PositiveIntegerField(default=0, verbose_name='Количество баллов')),
                ('time', models.TimeField(blank=True, null=True, verbose_name='Время на прохождение')),
                ('shuffle_order_tasks', models.BooleanField(default=False, verbose_name='Перемешать порядок заданий')),
                ('shuffle_order_answers', models.BooleanField(default=False, verbose_name='Перемешать порядок ответов')),
                ('enable_points', models.BooleanField(default=True, verbose_name='Включить баллы')),
                ('comment_list', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.commentlist', verbose_name='Список комментариев')),
                ('course_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.coursesection', verbose_name='Раздел курса')),
            ],
            options={
                'verbose_name': 'Тестирование',
                'verbose_name_plural': 'Тестирования',
                'ordering': ['-datetime_create'],
            },
        ),
        migrations.CreateModel(
            name='TestPenaltyDelay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seconds', models.PositiveIntegerField(verbose_name='Количество секунд')),
                ('points_loss_percent', models.PositiveIntegerField(verbose_name='Снятие процентов баллов')),
            ],
            options={
                'verbose_name': 'Штраф за задержку выполнения тестирования',
                'verbose_name_plural': 'Штраф за задержку выполнения тестирования',
            },
        ),
        migrations.CreateModel(
            name='TestSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Название')),
                ('description', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Описание')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Позиция в списке')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.test', verbose_name='Тестирование')),
            ],
            options={
                'verbose_name': 'Раздел в тестировании',
                'verbose_name_plural': 'Разделы в тестированиях',
            },
        ),
        migrations.CreateModel(
            name='TestTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=4096, verbose_name='Текст')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/', verbose_name='Изображение')),
                ('points', models.PositiveIntegerField(default=1, verbose_name='Количество баллов')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Позиция в списке')),
                ('required', models.BooleanField(default=False, verbose_name='Обязательный')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.test', verbose_name='Тестирование')),
                ('test_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.testsection', verbose_name='Раздел в тестировании')),
            ],
            options={
                'verbose_name': 'Задание в тестировании',
                'verbose_name_plural': 'Задание в тестировании',
            },
        ),
        migrations.CreateModel(
            name='UserActionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Название')),
                ('code', models.PositiveIntegerField(db_index=True, editable=False, unique=True, verbose_name='Код')),
            ],
            options={
                'verbose_name': 'Тип действия пользователя',
                'verbose_name_plural': 'Типы действий пользователей',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='UserAgent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, unique=True, verbose_name='Значение')),
            ],
            options={
                'verbose_name': 'User agent',
                'verbose_name_plural': 'User agents',
            },
        ),
        migrations.CreateModel(
            name='UserVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rejected', models.BooleanField(default=False, verbose_name='Отклонено')),
                ('rejection_cause', models.CharField(blank=True, max_length=4096, null=True, verbose_name='Причина отклонения')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Верификация пользователя',
                'verbose_name_plural': 'Верификация пользователей',
                'ordering': ['rejected'],
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dark_theme', models.BooleanField(default=False, verbose_name='Темная тема')),
                ('background_image', models.ImageField(blank=True, null=True, upload_to='images/', verbose_name='Фоновое изображение')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Настройки пользователя',
                'verbose_name_plural': 'Настройки пользователя',
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_last_activity', models.DateTimeField(verbose_name='Дата и время последнего действия')),
                ('online_days_in_a_row', models.PositiveIntegerField(default=1, verbose_name='Онлайн дней подряд')),
                ('online_days_in_a_row_max', models.PositiveIntegerField(default=1, verbose_name='Онлайн дней подряд максимум')),
                ('date_last_online', models.DateField(verbose_name='Дата последнего онлайна')),
                ('user', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Активность пользователя',
                'verbose_name_plural': 'Активность пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время')),
                ('kwargs', models.JSONField(blank=True, max_length=1024, null=True, verbose_name='Словарь аргументов')),
                ('action_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.useractiontype', verbose_name='Тип действия')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Действие пользователя',
                'verbose_name_plural': 'Действия пользователей',
                'ordering': ['action_type__code'],
            },
        ),
        migrations.CreateModel(
            name='TestTextAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('correct_answer', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Правильный ответ')),
                ('multiline', models.BooleanField(default=False, verbose_name='Многострочный')),
                ('test_task', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.testtask', verbose_name='Задание в тестировании')),
            ],
            options={
                'verbose_name': 'Текстовый ответ',
                'verbose_name_plural': 'Текстовый ответ',
            },
        ),
        migrations.CreateModel(
            name='TestTaskAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Текст')),
                ('points', models.PositiveIntegerField(default=0, verbose_name='Количество баллов')),
                ('verified', models.BooleanField(default=False, verbose_name='Проверено')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.student', verbose_name='Студент')),
                ('test_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.testtask', verbose_name='Задание в тестировании')),
            ],
            options={
                'verbose_name': 'Ответ на задание в тестировании',
                'verbose_name_plural': 'Ответы на задания в тестировании',
            },
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_begin', models.DateTimeField(verbose_name='Дата и время начала')),
                ('datetime_complete', models.DateTimeField(blank=True, null=True, verbose_name='Дата и время завершения')),
                ('points', models.PositiveIntegerField(default=0, verbose_name='Количество баллов')),
                ('penalty_points', models.PositiveIntegerField(default=0, verbose_name='Штрафные баллы')),
                ('viewed', models.BooleanField(default=False, verbose_name='Просмотрено')),
                ('completed', models.BooleanField(default=False, verbose_name='Завершено')),
                ('assigned_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.assignedtest', verbose_name='Назначенное тестирование')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.student', verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Результат тестирования',
                'verbose_name_plural': 'Результаты тестирований',
                'ordering': ['-datetime_complete', '-assigned_test__date', '-points'],
            },
        ),
        migrations.CreateModel(
            name='TestCheckAnswerList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('one_answer', models.BooleanField(default=False, verbose_name='Один вариант ответа')),
                ('test_task', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.testtask', verbose_name='Задание в тестировании')),
            ],
            options={
                'verbose_name': 'Список вариантов ответов',
                'verbose_name_plural': 'Список вариантов ответов',
            },
        ),
        migrations.CreateModel(
            name='TestCheckAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=4096, verbose_name='Текст')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Позиция в списке')),
                ('is_correct', models.BooleanField(default=False, verbose_name='Правильный')),
                ('possible_answer_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.testcheckanswerlist', verbose_name='Список вариантов ответов')),
            ],
            options={
                'verbose_name': 'Вариант ответа',
                'verbose_name_plural': 'Вариант ответа',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Преподаватель',
                'verbose_name_plural': 'Преподаватели',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('image', models.ImageField(blank=True, null=True, upload_to='icons/', verbose_name='Иконка')),
                ('name', models.CharField(max_length=150, verbose_name='Название')),
                ('text', models.TextField(max_length=16384, verbose_name='Текст задачи')),
                ('answer_after_complete', models.TextField(verbose_name='Ответ после выполнения')),
                ('points', models.PositiveIntegerField(default=0, verbose_name='Баллы за выполнение')),
                ('max_attempts', models.PositiveIntegerField(blank=True, null=True, verbose_name='Максимальное количество попыток')),
                ('attempts_per_day', models.PositiveIntegerField(blank=True, null=True, verbose_name='Количество попыток в день')),
                ('manual_check_result', models.BooleanField(default=True, verbose_name='Ручная проверка выполнения')),
                ('count_forms', models.PositiveIntegerField(default=1, verbose_name='Количество форм ввода')),
                ('variable_count_forms', models.BooleanField(default=False, verbose_name='Изменяемое количество форм ввода')),
                ('answer_format', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.answerformat', verbose_name='Формат ответа')),
                ('comment_list', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.commentlist', verbose_name='Список комментариев')),
                ('course_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.coursesection', verbose_name='Раздел')),
                ('difficulty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.difficulty', verbose_name='Сложность')),
                ('file_list', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.filelist', verbose_name='Список файлов')),
                ('hashtag_list', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.hashtaglist', verbose_name='Список хештегов')),
            ],
            options={
                'verbose_name': 'Задание',
                'verbose_name_plural': 'Задания',
                'ordering': ['-datetime_create'],
            },
        ),
        migrations.CreateModel(
            name='StudentActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pass_tasks_first_time_in_a_row', models.PositiveIntegerField(default=0, verbose_name='Выполнено заданий с первого раза подряд')),
                ('pass_tasks_first_time_in_a_row_max', models.PositiveIntegerField(default=0, verbose_name='Выполнено заданий с первого раза подряд максимум')),
                ('student', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.student', verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Активность студента',
                'verbose_name_plural': 'Активности студентов',
            },
        ),
        migrations.CreateModel(
            name='StudentAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_receiving', models.DateField(verbose_name='Дата получения')),
                ('level', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Уровень')),
                ('viewed', models.BooleanField(default=False, verbose_name='Просмотрено')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.achievement', verbose_name='Достижение')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.student', verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Достижение студента',
                'verbose_name_plural': 'Достижения студентов',
                'ordering': ['-date_receiving'],
            },
        ),
        migrations.AddField(
            model_name='student',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.studentgroup', verbose_name='Группа'),
        ),
        migrations.AddField(
            model_name='student',
            name='level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.level', verbose_name='Уровень'),
        ),
        migrations.AddField(
            model_name='student',
            name='rank',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.rank', verbose_name='Ранг'),
        ),
        migrations.AddField(
            model_name='student',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.CreateModel(
            name='SelectedTestAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.testcheckanswer', verbose_name='Вариант ответа')),
                ('task_user_answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.testtaskanswer', verbose_name='Ответ на задание в тестировании')),
            ],
            options={
                'verbose_name': 'Выбранный вариант ответа',
                'verbose_name_plural': 'Выбранный вариант ответа',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Название')),
                ('document_url', models.CharField(blank=True, max_length=2048, null=True, validators=[django.core.validators.URLValidator(), api.validators.validate_document_url], verbose_name='Ссылка на Google Document')),
                ('figma_url', models.CharField(blank=True, max_length=2048, null=True, validators=[django.core.validators.URLValidator(), api.validators.validate_figma_url], verbose_name='Ссылка на Figma')),
                ('drawio_url', models.CharField(blank=True, max_length=2048, null=True, validators=[django.core.validators.URLValidator(), api.validators.validate_drawio_url], verbose_name='Ссылка на Drawio')),
                ('github_url', models.CharField(blank=True, max_length=2048, null=True, validators=[django.core.validators.URLValidator(), api.validators.validate_github_url], verbose_name='Ссылка на GitHub')),
                ('comment_list', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.commentlist', verbose_name='Список комментариев')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.projectstatus', verbose_name='Статус')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.student', verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Проект',
                'verbose_name_plural': 'Проекты',
            },
        ),
        migrations.CreateModel(
            name='ProcCheckingCompletingTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checking_completing_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.checkingcompletingtask', verbose_name='Проверка выполнения задания')),
                ('completing_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.completingtask', verbose_name='Назначенное задание')),
            ],
            options={
                'verbose_name': 'Обработка проверки выполнения задания',
                'verbose_name_plural': 'Обработка проверок выполнения заданий',
            },
        ),
        migrations.CreateModel(
            name='PostView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.post', verbose_name='Пост')),
                ('user', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Просмотр поста',
                'verbose_name_plural': 'Просмотры постов',
            },
        ),
        migrations.CreateModel(
            name='PostForStudentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.post', verbose_name='Пост')),
                ('student_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.studentgroup', verbose_name='Группа студентов')),
            ],
            options={
                'verbose_name': 'Пост для группы студентов',
                'verbose_name_plural': 'Посты для групп студентов',
            },
        ),
        migrations.CreateModel(
            name='PointsAdditional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_receiving', models.DateField(verbose_name='Дата получения')),
                ('points', models.PositiveIntegerField(default=0, verbose_name='Количество баллов')),
                ('comment', models.CharField(blank=True, max_length=4096, null=True, verbose_name='Комментарий')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.student', verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Дополнительные баллы',
                'verbose_name_plural': 'Дополнительные баллы',
                'ordering': ['-date_receiving'],
            },
        ),
        migrations.CreateModel(
            name='PersonalInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='icons/', verbose_name='Аватарка')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='images/', verbose_name='Обложка')),
                ('birthday', models.DateField(blank=True, null=True, validators=[api.validators.validate_past_date], verbose_name='Дата дня рождения')),
                ('about_me', models.CharField(blank=True, max_length=150, null=True, verbose_name='О себе')),
                ('user', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Личная информация',
                'verbose_name_plural': 'Личная информация',
                'ordering': ['-birthday'],
            },
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('kwargs', models.JSONField(blank=True, max_length=1024, null=True, verbose_name='Словарь аргументов')),
                ('is_read', models.BooleanField(default=False, verbose_name='Прочитано')),
                ('notice_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.noticetype', verbose_name='Тип')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
                'ordering': ['-datetime_create'],
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время')),
                ('path', models.CharField(max_length=255, verbose_name='Путь')),
                ('kwargs', models.JSONField(blank=True, max_length=1024, null=True, verbose_name='Словарь аргументов')),
                ('status_code', models.PositiveIntegerField(verbose_name='Код ответа')),
                ('ip_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.ipaddress', verbose_name='IP адрес')),
                ('method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.requestmethod', verbose_name='Метод запроса')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('user_agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.useragent', verbose_name='User agent')),
            ],
            options={
                'verbose_name': 'Запись в журнале',
                'verbose_name_plural': 'Записи в журнале',
                'ordering': ['-datetime_create'],
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Описание')),
                ('url', models.CharField(max_length=2048, unique=True, validators=[django.core.validators.URLValidator()], verbose_name='Ссылка')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Позиция в списке')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.linkgroup', verbose_name='Группа')),
            ],
            options={
                'verbose_name': 'Ссылка',
                'verbose_name_plural': 'Ссылки',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='LessonPresence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.lesson', verbose_name='Занятие')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.student', verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Присутствие на занятии',
                'verbose_name_plural': 'Присутствия на занятиях',
                'ordering': ['-lesson__date'],
            },
        ),
        migrations.AddField(
            model_name='lesson',
            name='student_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.studentgroup', verbose_name='Группа студентов'),
        ),
        migrations.CreateModel(
            name='IntegrationTelegram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_username', models.CharField(blank=True, max_length=2048, null=True, verbose_name='Никнейм в Telegram')),
                ('connect', models.BooleanField(default=False, verbose_name='Подключить')),
                ('connection_status', models.BooleanField(default=False, verbose_name='Статус подключения')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Интеграция с Telegram',
                'verbose_name_plural': 'Интеграции с Telegram',
            },
        ),
        migrations.CreateModel(
            name='HashtagFromList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hashtag', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.hashtag', verbose_name='Хештег')),
                ('hashtag_list', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.hashtaglist', verbose_name='Список хештегов')),
            ],
            options={
                'verbose_name': 'Хештег из списка',
                'verbose_name_plural': 'Хештеги из списков',
            },
        ),
        migrations.CreateModel(
            name='HappyBirthday',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.PositiveIntegerField(verbose_name='Возраст')),
                ('personal_information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.personalinformation', verbose_name='Личная информация')),
            ],
            options={
                'verbose_name': 'Поздравление с днем рождения',
                'verbose_name_plural': 'Поздравления с днем рождения',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('file', models.FileField(upload_to='files/', verbose_name='Файл')),
                ('file_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.filelist', verbose_name='Список файлов')),
            ],
            options={
                'verbose_name': 'Файл',
                'verbose_name_plural': 'Файлы',
                'ordering': ['-datetime_create'],
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('text', models.TextField(max_length=4096, verbose_name='Текст')),
                ('is_read', models.BooleanField(default=False, verbose_name='Прочитано')),
                ('student_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.studentgroup', verbose_name='Группа студентов')),
            ],
            options={
                'verbose_name': 'Обратная связь',
                'verbose_name_plural': 'Обратная связь',
                'ordering': ['is_read'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_begin', models.DateTimeField(verbose_name='Дата и время начала')),
                ('datetime_end', models.DateTimeField(verbose_name='Дата и время завершения')),
                ('name', models.CharField(max_length=150, verbose_name='Название')),
                ('image', models.ImageField(blank=True, null=True, upload_to='icons/', verbose_name='Иконка')),
                ('text', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Описание')),
                ('points', models.PositiveIntegerField(unique=True, verbose_name='Количество баллов')),
                ('comment_list', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.commentlist', verbose_name='Список комментариев')),
                ('hashtag_list', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.hashtaglist', verbose_name='Список хештегов')),
            ],
            options={
                'verbose_name': 'Событие',
                'verbose_name_plural': 'События',
            },
        ),
        migrations.AddField(
            model_name='completingtask',
            name='file_list',
            field=models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.filelist', verbose_name='Список файлов'),
        ),
        migrations.AddField(
            model_name='completingtask',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.taskstatus', verbose_name='Статус'),
        ),
        migrations.AddField(
            model_name='completingtask',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.student', verbose_name='Студент'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
                ('text', models.TextField(max_length=4096, verbose_name='Текст')),
                ('is_read', models.BooleanField(default=False, verbose_name='Прочитано')),
                ('comment_list', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api.commentlist', verbose_name='Список комментариев')),
                ('nested_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.comment', verbose_name='Вложенный комментарий')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
                'ordering': ['-datetime_create'],
            },
        ),
        migrations.CreateModel(
            name='CheckingTaskAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kwargs', models.JSONField(blank=True, max_length=16384, null=True, verbose_name='Словарь аргументов')),
                ('script', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.taskaccesscheckscript', verbose_name='Скрипт')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.task', verbose_name='Задание')),
            ],
            options={
                'verbose_name': 'Проверка доступа к заданию',
                'verbose_name_plural': 'Проверки доступа к заданию',
            },
        ),
        migrations.AddField(
            model_name='checkingcompletingtask',
            name='script',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.completingtaskcheckscript', verbose_name='Скрипт'),
        ),
        migrations.AddField(
            model_name='checkingcompletingtask',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.task', verbose_name='Задание'),
        ),
        migrations.CreateModel(
            name='BlockedUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_unlock', models.DateTimeField(blank=True, null=True, verbose_name='Дата и время разблокировки')),
                ('cause', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Причина')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Блокировка пользователя',
                'verbose_name_plural': 'Заблокированные пользователи',
                'ordering': ['-datetime_unlock'],
            },
        ),
        migrations.CreateModel(
            name='BlockedIPAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_unlock', models.DateTimeField(blank=True, null=True, verbose_name='Дата и время разблокировки')),
                ('cause', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Причина')),
                ('ip_address', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.ipaddress', verbose_name='IP адрес')),
            ],
            options={
                'verbose_name': 'Блокировка по IP адрес',
                'verbose_name_plural': 'Заблокированные IP адреса',
                'ordering': ['-datetime_unlock'],
            },
        ),
        migrations.AddField(
            model_name='assignedtest',
            name='student_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.studentgroup', verbose_name='Группа студентов'),
        ),
        migrations.AddField(
            model_name='assignedtest',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.test', verbose_name='Тестирование'),
        ),
        migrations.AddField(
            model_name='assignedtask',
            name='student_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.studentgroup', verbose_name='Группа студентов'),
        ),
        migrations.AddField(
            model_name='assignedtask',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.task', verbose_name='Задание'),
        ),
        migrations.CreateModel(
            name='AssignedEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime_begin', models.DateTimeField(blank=True, null=True, verbose_name='Дата и время начала')),
                ('datetime_end', models.DateTimeField(blank=True, null=True, verbose_name='Дата и время завершения')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.event', verbose_name='Событие')),
                ('student_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.studentgroup', verbose_name='Группа студентов')),
            ],
            options={
                'verbose_name': 'Событие для группы студентов',
                'verbose_name_plural': 'События для групп студентов',
                'ordering': ['-datetime_begin', 'datetime_end'],
            },
        ),
        migrations.CreateModel(
            name='AchievementLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, max_length=4096, null=True, verbose_name='Описание')),
                ('level', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Уровень')),
                ('required_value', models.IntegerField(blank=True, null=True, verbose_name='Необходимое значение')),
                ('badge_awarded', models.BooleanField(default=False, verbose_name='Выдается значок')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.achievement', verbose_name='Достижение')),
                ('rank', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.rank', verbose_name='Ранг')),
            ],
            options={
                'verbose_name': 'Уровень достижения',
                'verbose_name_plural': 'Уровни достижений',
                'ordering': ['rank__code'],
            },
        ),
        migrations.AddField(
            model_name='achievement',
            name='progress_script',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.achievementprogressscript', verbose_name='Скрипт получения прогресса'),
        ),
    ]
